// Both of these suggestions from ReSharper should be ignored.  If the properties are private or 'get-only' then they
// can't be De/Serialized properly.
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Global
// ReSharper disable MemberCanBePrivate.Global

// This was regarding the GetHashCode function generated by Rider which ReSharper then complained about it
// ReSharper disable NonReadonlyMemberInGetHashCode

// The class isn't instantiated directly, but it may be as part of future tests.
// ReSharper disable ClassNeverInstantiated.Global

namespace ConfigurationTest.Configs;

public class ComplexConfig : IEquatable<ComplexConfig>
{
	public BasicConfig Basic { get; set; } = new();
	public OtherConfig Other { get; set; } = new();

	public double DoubleValue { get; set; } = 0.99;

	public bool Equals(ComplexConfig? other)
	{
		if (ReferenceEquals(null, other)) return false;
		if (ReferenceEquals(this, other)) return true;
		return Basic.Equals(other.Basic)
		       && Other.Equals(other.Other)
		       && DoubleValue.Equals(other.DoubleValue);
	}

	public override bool Equals(object? obj)
	{
		if (ReferenceEquals(null, obj)) return false;
		if (ReferenceEquals(this, obj)) return true;
		return obj.GetType() == GetType()
		       && Equals((ComplexConfig)obj);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(Basic, Other, DoubleValue);
	}
}