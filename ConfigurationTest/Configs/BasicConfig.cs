// Both of these suggestions from ReSharper should be ignored.  If the properties are private or 'get-only' then they
// can't be De/Serialized properly
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Global
// ReSharper disable MemberCanBePrivate.Global

// This was regarding the GetHashCode function generated by Rider which ReSharper then complained about it
// ReSharper disable NonReadonlyMemberInGetHashCode

namespace ConfigurationTest.Configs;

public class BasicConfig : IEquatable<BasicConfig>
{
	// The setters have to exist (despite the optimization ReSharper suggests), or these won't serialize properly
	public bool BoolValue { get; set; } = Constants.BoolValue;
	public int IntegerValue { get; set; } = Constants.IntegerValue;
	public float FloatValue { get; set; } = Constants.FloatValue;
	public string StringValue { get; set; } = Constants.StringValue;

	public BasicConfig() { }

	public BasicConfig(bool b, int i, float f, string s)
	{
		BoolValue = b;
		IntegerValue = i;
		FloatValue = f;
		StringValue = s;
	}

	public override string ToString()
	{
		return $"{BoolValue} | {IntegerValue} | {FloatValue} | {StringValue}";
	}

	public bool Equals(BasicConfig? other)
	{
		if (ReferenceEquals(null, other)) return false;
		if (ReferenceEquals(this, other)) return true;
		return BoolValue == other.BoolValue
		       && IntegerValue == other.IntegerValue
		       && FloatValue.Equals(other.FloatValue)
		       && StringValue == other.StringValue;
	}

	public override bool Equals(object? obj)
	{
		if (ReferenceEquals(null, obj)) return false;
		if (ReferenceEquals(this, obj)) return true;
		return obj.GetType() == GetType()
		       && Equals((BasicConfig)obj);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(BoolValue, IntegerValue, FloatValue, StringValue);
	}
}