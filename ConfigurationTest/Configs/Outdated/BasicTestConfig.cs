// Both of these suggestions from ReSharper should be ignored.  If the properties are private or 'get-only' then they
// can't be De/Serialized properly
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Global
// ReSharper disable MemberCanBePrivate.Global

// This was regarding the GetHashCode function generated by Rider which ReSharper then complained about it
// ReSharper disable NonReadonlyMemberInGetHashCode

namespace ConfigurationTest.Configs.Outdated;

// Identical to the 'new' BasicConfig, but missing the CharValue property to simulate an evolving config file
// structure
public class BasicTestConfig : IEquatable<BasicTestConfig>
{
	public int IntegerValue { get; set; } = Constants.IntegerValue;
	public float FloatValue { get; set;  } = Constants.FloatValue;
	public string StringValue { get; set;  } = Constants.StringValue;
	
	// Consider this an obsolete / deprecated field
	// This will prove that we can remove fields without breaking the configs
	public ushort UshortValue { get; set; }

	public BasicTestConfig() { }

	public BasicTestConfig(int i, float f, string s, ushort u)
	{
		IntegerValue = i;
		FloatValue = f;
		StringValue = s;
		UshortValue = u;
	}

	public override string ToString()
	{
		return $"{IntegerValue} | {FloatValue} | {StringValue} | {UshortValue}";
	}

	public bool Equals(BasicTestConfig? other)
	{
		if (ReferenceEquals(null, other)) return false;
		if (ReferenceEquals(this, other)) return true;
		return IntegerValue == other.IntegerValue
		       && FloatValue.Equals(other.FloatValue)
		       && StringValue == other.StringValue;
	}

	public override bool Equals(object? obj)
	{
		if (ReferenceEquals(null, obj)) return false;
		if (ReferenceEquals(this, obj)) return true;
		return obj.GetType() == GetType()
		       && Equals((BasicTestConfig)obj);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(IntegerValue, FloatValue, StringValue);
	}
}